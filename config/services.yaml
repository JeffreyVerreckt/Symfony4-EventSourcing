# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

imports:
    - { resource: "event_store_http_api.yaml" }

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php,Infrastructure/Repository}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Presentation\UI\Api\Rest\:
        resource: '../src/Presentation/UI/Api/Rest'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Core\Component\Product\Application\Handler\CreateProductHandler:
      arguments: ['@product_repository']
      public: true
      tags:
        - { name: 'prooph_service_bus.default_command_bus.route_target', message_detection: true }

    App\Core\Component\Product\Application\Handler\ChangeProductPriceHandler:
      arguments: ['@product_repository']
      public: true
      tags:
        - { name: 'prooph_service_bus.default_command_bus.route_target', message_detection: true }

    App\Core\Component\Product\Application\Handler\GetAllProductsHandler:
      tags:
        - { name: 'prooph_service_bus.default_query_bus.route_target', message_detection: true }

    prooph_event_store_bus_bridge.default_event_publisher:
        class: Prooph\EventStoreBusBridge\EventPublisher
        arguments: ['@prooph_service_bus.default_event_bus']
        public: true
        tags:
          - { name: 'prooph_event_store.default_store.plugin' }